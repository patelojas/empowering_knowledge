{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar d3 = _interopRequireWildcard(require(\"d3\"));\n\nvar _HeatMapDate = require(\"./helpers/HeatMapDate\");\n\nvar _d3Tip = _interopRequireDefault(require(\"d3-tip\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Component that display a heatmap to visualize data through date.\n * Each square is a day.\n */\n\n\nvar HeatMapDate =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(HeatMapDate, _React$PureComponent);\n  /**\n   * Set a default value to unrequired props\n   */\n\n\n  function HeatMapDate(props) {\n    var _this;\n\n    _classCallCheck(this, HeatMapDate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HeatMapDate).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"ID\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"IDLegend\", void 0);\n\n    if (props.rectWidth && props.rectWidth < 0) throw new Error(\"rectWidth must be greater than zero\");\n    if (props.marginBottom && props.marginBottom < 0) throw new Error(\"marginBottom must be greater than zero\");\n    if (props.marginRight && props.marginRight < 0) throw new Error(\"marginRight must be greater than zero\");\n    if (props.monthSpace && props.monthSpace < 0) throw new Error(\"monthSpace must be greater than zero\");\n    if (props.radius && props.radius < 0) throw new Error(\"radius must be greater than zero\");\n    _this.ID = Math.random().toString(36).replace(/[^a-z]+/g, \"\").substr(0, 32);\n    _this.IDLegend = Math.random().toString(36).replace(/[^a-z]+/g, \"\").substr(0, 32);\n    _this.state = {\n      svgElem: undefined,\n      svgLegend: undefined,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  _createClass(HeatMapDate, [{\n    key: \"cleanHeatMap\",\n    value: function cleanHeatMap(svg) {\n      d3.select(\".d3-tip.\" + this.ID).remove();\n      d3.select(\".d3-tip.\" + this.IDLegend).remove(); // We remove all elements (rect + text) to properly update the svg\n\n      svg.selectAll(\"*\").remove();\n    }\n  }, {\n    key: \"renderLegend\",\n    value: function renderLegend(svgLegend, legendWidth) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          colors = _this$props.colors,\n          defaultColor = _this$props.defaultColor,\n          rectWidth = _this$props.rectWidth,\n          marginRight = _this$props.marginRight,\n          displayLegend = _this$props.displayLegend,\n          backgroundColor = _this$props.backgroundColor,\n          textColor = _this$props.textColor,\n          radius = _this$props.radius,\n          textDefaultColor = _this$props.textDefaultColor;\n\n      if (displayLegend) {\n        var svgLegendD3 = d3.select(svgLegend);\n        svgLegendD3.selectAll(\"*\").remove();\n        svgLegendD3.attr(\"width\", legendWidth).attr(\"height\", 30);\n        svgLegendD3.append(\"text\").text(\"Legend :\").attr(\"x\", 0).attr(\"y\", 20).attr(\"font-size\", rectWidth + 3).attr(\"fill\", textColor);\n        var tip = (0, _d3Tip.default)().attr(\"class\", \"d3-tip \" + this.IDLegend).offset([-8, 0]).html(function (d) {\n          var displ = d.text ? d.text : d.count.toString();\n          return \"<div style={{ fontSize: '15' }}>\" + displ + \"</div>\";\n        });\n        svgLegendD3.call(tip);\n        var legendColors = [{\n          color: defaultColor,\n          count: 0,\n          text: textDefaultColor ? textDefaultColor : \"0\"\n        }];\n        colors.map(function (c) {\n          legendColors.push(c);\n        });\n        svgLegendD3.selectAll(\"rect\").data(legendColors).enter().append(\"rect\").attr(\"width\", rectWidth).attr(\"height\", rectWidth).attr(\"x\", function (d, i) {\n          return (rectWidth + marginRight) * i + rectWidth * 6;\n        }).attr(\"y\", 15 - rectWidth / 2).attr(\"rx\", radius).attr(\"ry\", radius).attr(\"fill\", function (d) {\n          return d.color;\n        }).on(\"mouseover\", function (d) {\n          if (d.color !== backgroundColor) {\n            tip.show(d, this);\n            d3.select(this).attr(\"stroke\", textColor);\n          }\n        }).on(\"mouseout\", function (d) {\n          tip.hide(d, _this2);\n          d3.selectAll(\"rect\").attr(\"stroke\", \"none\");\n        });\n      } else {\n        var _svgLegendD = d3.select(svgLegend);\n\n        _svgLegendD.attr(\"width\", 0).attr(\"height\", 0);\n      }\n    }\n  }, {\n    key: \"renderHeatMap\",\n    value: function renderHeatMap(dataset, svg, noMonthName) {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          startDate = _this$props2.startDate,\n          rectWidth = _this$props2.rectWidth,\n          marginBottom = _this$props2.marginBottom,\n          backgroundColor = _this$props2.backgroundColor,\n          textColor = _this$props2.textColor,\n          radius = _this$props2.radius,\n          displayYear = _this$props2.displayYear,\n          onClick = _this$props2.onClick,\n          onMouseEnter = _this$props2.onMouseEnter,\n          onMouseLeave = _this$props2.onMouseLeave,\n          monthSpace = _this$props2.monthSpace,\n          marginRight = _this$props2.marginRight; // Array of months for x axis\n\n      var monthsName = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n      if (dataset.length > 0) {\n        // I added an ID the tooltip because it's a workaround to prevent the tooltip won't hide when the component is updating\n        var tip = (0, _d3Tip.default)().attr(\"class\", \"d3-tip \" + this.ID).offset([-8, 0]).html(function (d) {\n          if (d.color !== backgroundColor) {\n            return \"<div style={{ fontSize: '15' }}>\" + d.date.getFullYear() + \"/\" + (d.date.getMonth() + 1) + \"/\" + d.date.getDate() + \" : \" + d.count + \"</div>\";\n          } else return null;\n        });\n        svg.call(tip); // Display all data squares\n\n        var monthOffset = 0;\n        svg.selectAll(\"rect\").data(dataset).enter().append(\"rect\").attr(\"fill-opacity\", 1).attr(\"width\", rectWidth).attr(\"height\", rectWidth).attr(\"class\", \"dayRect\").attr(\"x\", function (d) {\n          var prefixYear = displayYear ? rectWidth : 0;\n          var currentDate = new Date(d.date);\n\n          if (currentDate.getDate() === 1 && d.color !== backgroundColor) {\n            monthOffset++;\n          }\n\n          if (currentDate.getDate() === 1 && d.color !== backgroundColor || currentDate.getTime() === new Date(startDate).setHours(0, 0, 0, 0) && new Date(startDate).getDate() < 14) {\n            var prefix = displayYear ? new Date(currentDate).getFullYear().toString().substring(2, 4) + \"/\" : \"\"; // Display month name\n\n            svg.append(\"text\").text(prefix + monthsName[currentDate.getMonth()]).attr(\"x\", function () {\n              return Math.floor(d.i / 7) * (rectWidth + marginRight) + 40 + monthOffset * monthSpace - prefixYear;\n            }).attr(\"y\", 18).attr(\"font-size\", rectWidth + 3).attr(\"fill\", textColor);\n          }\n\n          return Math.floor(d.i / 7) * (rectWidth + marginRight) + 40 + monthOffset * monthSpace;\n        }).attr(\"y\", function (d) {\n          return d.i % 7 * (rectWidth + marginBottom) + 24;\n        }).attr(\"fill\", function (d) {\n          return d.color;\n        }).attr(\"rx\", radius).attr(\"ry\", radius).on(\"mouseover\", function (d, i) {\n          if (d.color !== backgroundColor && d.color !== _HeatMapDate.noDisplayColor) {\n            tip.show(d, this);\n            d3.select(this).attr(\"stroke\", \"black\");\n          }\n\n          onMouseEnter(d, i);\n        }).on(\"mouseout\", function (d, i) {\n          tip.hide(d, _this3);\n          d3.selectAll(\"rect\").attr(\"stroke\", \"none\");\n          onMouseLeave(d, i);\n        }).on(\"click\", function (d, i) {\n          onClick(d, i);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props3 = this.props,\n          startDate = _this$props3.startDate,\n          endDate = _this$props3.endDate,\n          data = _this$props3.data,\n          colors = _this$props3.colors,\n          defaultColor = _this$props3.defaultColor,\n          rectWidth = _this$props3.rectWidth,\n          marginRight = _this$props3.marginRight,\n          marginBottom = _this$props3.marginBottom,\n          backgroundColor = _this$props3.backgroundColor,\n          textColor = _this$props3.textColor,\n          classnames = _this$props3.classnames,\n          shouldStartMonday = _this$props3.shouldStartMonday,\n          monthSpace = _this$props3.monthSpace,\n          rangeDisplayData = _this$props3.rangeDisplayData,\n          fadeAnimation = _this$props3.fadeAnimation;\n      var _this$state = this.state,\n          svgElem = _this$state.svgElem,\n          svgLegend = _this$state.svgLegend,\n          firstRender = _this$state.firstRender; // Array of days for y axis\n\n      var daysName = !shouldStartMonday ? [\"Sun\", \"Tue\", \"Thu\", \"Sat\"] : [\"Mon\", \"Wed\", \"Fri\", \"Sun\"];\n      var svg = d3.select(svgElem); // This is a possible workaround about tooltips that do not want to hide when data changes\n      // See https://github.com/Caged/d3-tip/issues/133\n\n      this.cleanHeatMap(svg);\n      var tmpBufferDate = new Date(startDate);\n      var startDateYesterday = new Date(startDate); // When want to display month on first column if difference between\n      // startDate and endDate less than 1 month\n\n      var noMonthName = startDate.getMonth() === endDate.getMonth() && startDate.getFullYear() === endDate.getFullYear() || startDate.getMonth() == 11 && endDate.getMonth() === 0 && endDate.getFullYear() - startDate.getFullYear() === 1;\n      startDateYesterday.setDate(startDateYesterday.getDate() - 1); // We set bufferDate to the previous Sunday (or Monday following 'shouldStartMonday' prop) of startDate.\n\n      tmpBufferDate.setDate(tmpBufferDate.getDate() - startDateYesterday.getDay());\n\n      if (!shouldStartMonday) {\n        tmpBufferDate.setDate(tmpBufferDate.getDate() - 1);\n      } // buffer that begin from previous Sunday (or Monday) of startDate then browse every day to endDate\n\n\n      var bufferDate = new Date(tmpBufferDate);\n      bufferDate.setHours(0, 0, 0, 0); // Number of day from bufferDate to endDate\n\n      var nbDayDiff = (endDate.getTime() - bufferDate.getTime()) / 1000 / 60 / 60 / 24;\n      var nbMonthsDiff = (endDate.getTime() - bufferDate.getTime()) / 1000 / 60 / 60 / 24 / 30;\n      var legendWidth = (rectWidth + marginRight) * colors.length + 90 + 50;\n      var svgWidth = (rectWidth + marginRight) * (nbDayDiff / 7) + nbMonthsDiff * monthSpace + 70; // Set width and height of SVG element\n\n      svg.attr(\"width\", legendWidth > svgWidth ? legendWidth : svgWidth).attr(\"height\", (rectWidth + marginBottom) * 7 + 50);\n      var dataset = (0, _HeatMapDate.generateD3Dataset)(nbDayDiff, svg, daysName, rectWidth, marginBottom, textColor, data, bufferDate, backgroundColor, startDateYesterday, defaultColor, colors, rangeDisplayData);\n      this.renderLegend(svgLegend, legendWidth);\n      this.renderHeatMap(dataset, svg, noMonthName);\n      var styles = {\n        width: legendWidth > svgWidth ? legendWidth : svgWidth + \"px\",\n        height: \"auto\",\n        backgroundColor: backgroundColor,\n        animationDuration: \"0s\"\n      };\n\n      if (fadeAnimation.animate) {\n        styles.animationDuration = fadeAnimation.duration + \"s\";\n      }\n\n      return React.createElement(\"div\", {\n        className: \"react-d3-heatMap-container \" + classnames,\n        style: styles,\n        id: \"react-d3-heatMap-\" + this.ID\n      }, React.createElement(\"svg\", {\n        style: {\n          display: \"block\"\n        },\n        ref: function ref(elem) {\n          if (!_this4.state.svgElem) _this4.setState({\n            svgElem: elem\n          });\n        }\n      }), React.createElement(\"svg\", {\n        ref: function ref(elem) {\n          if (!_this4.state.svgLegend) _this4.setState({\n            svgLegend: elem\n          });\n        }\n      }));\n    }\n  }]);\n\n  return HeatMapDate;\n}(React.PureComponent);\n\nexports.default = HeatMapDate;\n\n_defineProperty(HeatMapDate, \"defaultProps\", {\n  marginRight: 4,\n  marginBottom: 4,\n  displayLegend: true,\n  rectWidth: 10,\n  defaultColor: \"#cdcdcd\",\n  backgroundColor: \"#fff\",\n  textColor: \"#000\",\n  radius: 0,\n  classnames: \"\",\n  onClick: function onClick() {},\n  onMouseLeave: function onMouseLeave() {},\n  onMouseEnter: function onMouseEnter() {},\n  shouldStartMonday: false,\n  monthSpace: 0,\n  rangeDisplayData: [],\n  fadeAnimation: {\n    animate: true,\n    duration: 0.4\n  }\n});","map":null,"metadata":{},"sourceType":"script"}