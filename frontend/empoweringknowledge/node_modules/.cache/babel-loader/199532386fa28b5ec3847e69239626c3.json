{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Docker\\\\swe\\\\EmPoweringKnowledge\\\\cs373-web\\\\frontend\\\\empoweringknowledge\\\\src\\\\Map.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.democrat = 0;\n    this.republican = 0;\n    this.other = 0;\n    this.pages = 1;\n  }\n\n  componentDidMount() {\n    var value = window.location.href.split(\"/\");\n    var path = value[4];\n    var page = 1;\n\n    for (var i = 1; i < 173; i++) {\n      fetch('https://api.empoweringknowledge.me/api/congressmembers?page=' + page).then(res => res.json()).then(data => {\n        for (var d of data.objects) {\n          if (d.party == \"D\") {\n            this.democrat += Object.keys(d.bills_sponsored).length;\n          } else if (d.party == \"R\") {\n            this.republican += Object.keys(d.bills_sponsored).length;\n          } else {\n            this.other += Object.keys(d.bills_sponsored).length;\n          }\n\n          console.log(\"finish\");\n          console.log(this.democrat);\n          console.log(this.republican);\n        }\n      }, this.finish());\n    }\n  }\n\n  finish() {\n    console.log(\"done\");\n    return;\n  }\n\n  render() {\n    // Create dummy data\n    var data = {\n      republican: this.republican,\n      democrat: this.democrat,\n      other: this.other\n    };\n\n    if (data.republican == 0) {\n      return false;\n    }\n\n    console.log(data);\n    var width = window.screen.width * .5;\n    var height = 450;\n    var margin = 40; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n    var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n    var svg = d3.select(\"#body10\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); // set the color scale\n\n    var color = d3.scaleOrdinal().domain(data).range([\"#3385ff\", \"#8a89a6\", \"#FF5A5E\"]); // Compute the position of each group on the pie:\n\n    var pie = d3.pie().value(function (d) {\n      return d.value;\n    });\n    var data_ready = pie(d3.entries(data)); // Now I know that group A goes from 0 degrees to x degrees and so on.\n    // shape helper to build arcs:\n\n    var arcGenerator = d3.arc().innerRadius(0).outerRadius(radius); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n    svg.selectAll('mySlices').data(data_ready).enter().append('path').attr('d', arcGenerator).attr('fill', function (d) {\n      return color(d.data.key);\n    }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").append(\"title\").text(d => \"Total Donations: \".concat(d.data.value.toLocaleString())); // Now add the annotation. Use the centroid method to get the best coordinates\n\n    svg.selectAll('mySlices').data(data_ready).enter().append('text').text(function (d) {\n      return d.data.key;\n    }).attr(\"transform\", function (d) {\n      return \"translate(\" + arcGenerator.centroid(d) + \")\";\n    }).style(\"text-anchor\", \"middle\").style(\"font-size\", 17);\n    return React.createElement(\"div\", {\n      style: {\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"body10\",\n      width: \"100%\",\n      height: 650,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\Docker\\swe\\EmPoweringKnowledge\\cs373-web\\frontend\\empoweringknowledge\\src\\Map.js"],"names":["React","Component","d3","Map","constructor","props","democrat","republican","other","pages","componentDidMount","value","window","location","href","split","path","page","i","fetch","then","res","json","data","d","objects","party","Object","keys","bills_sponsored","length","console","log","finish","render","width","screen","height","margin","radius","Math","min","svg","select","append","attr","color","scaleOrdinal","domain","range","pie","data_ready","entries","arcGenerator","arc","innerRadius","outerRadius","selectAll","enter","key","style","text","toLocaleString","centroid","justifyContent"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass Map extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.democrat = 0;\r\n        this.republican = 0;\r\n        this.other = 0;\r\n        this.pages = 1;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        var value = window.location.href.split(\"/\")\r\n        var path = (value[4])\r\n        var page = 1;\r\n        for(var i = 1; i < 173; i++){\r\n            fetch('https://api.empoweringknowledge.me/api/congressmembers?page=' + page)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                for(var d of data.objects){\r\n                    if(d.party == \"D\"){\r\n                        \r\n                        this.democrat += Object.keys(d.bills_sponsored).length\r\n                       \r\n                    }\r\n                    else if(d.party == \"R\"){\r\n                        this.republican += Object.keys(d.bills_sponsored).length\r\n                    }\r\n                    else {\r\n                        this.other += Object.keys(d.bills_sponsored).length\r\n                    }\r\n                    console.log(\"finish\")\r\n                    console.log(this.democrat)\r\n                    console.log(this.republican)\r\n                }\r\n            }, this.finish())\r\n            \r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    finish(){\r\n        \r\n        console.log(\"done\")\r\n        return\r\n    }\r\n\r\n  \r\n\r\n    render() {\r\n        \r\n        \r\n\r\n\r\n\r\n\r\n        // Create dummy data\r\n        var data = {republican: this.republican, democrat: this.democrat, other: this.other}\r\n        if(data.republican == 0){\r\n            return false\r\n        }\r\n        console.log(data)\r\n        var width = window.screen.width*.5\r\n        var height = 450\r\n        var margin = 40\r\n\r\n        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\r\n        var radius = Math.min(width, height) / 2 - margin\r\n\r\n        // append the svg object to the div called 'my_dataviz'\r\n        var svg = d3.select(\"#body10\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .append(\"g\")\r\n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\r\n\r\n        // set the color scale\r\n        var color = d3.scaleOrdinal()\r\n        .domain(data)\r\n        .range([\"#3385ff\", \"#8a89a6\", \"#FF5A5E\"]);\r\n\r\n        // Compute the position of each group on the pie:\r\n        var pie = d3.pie()\r\n        .value(function (d) { return d.value; })\r\n        var data_ready = pie(d3.entries(data))\r\n        // Now I know that group A goes from 0 degrees to x degrees and so on.\r\n\r\n        // shape helper to build arcs:\r\n        var arcGenerator = d3.arc()\r\n        .innerRadius(0)\r\n        .outerRadius(radius)\r\n\r\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\r\n        svg\r\n        .selectAll('mySlices')\r\n        .data(data_ready)\r\n        .enter()\r\n        .append('path')\r\n        .attr('d', arcGenerator)\r\n        .attr('fill', function (d) { return (color(d.data.key)) })\r\n        .attr(\"stroke\", \"black\")\r\n        .style(\"stroke-width\", \"2px\")\r\n        .append(\"title\")\r\n        .text(d => `Total Donations: ${d.data.value.toLocaleString()}`);\r\n\r\n        // Now add the annotation. Use the centroid method to get the best coordinates\r\n        svg\r\n        .selectAll('mySlices')\r\n        .data(data_ready)\r\n        .enter()\r\n        .append('text')\r\n        .text(function (d) { return d.data.key })\r\n        .attr(\"transform\", function (d) { return \"translate(\" + arcGenerator.centroid(d) + \")\"; })\r\n        .style(\"text-anchor\", \"middle\")\r\n        .style(\"font-size\", 17)\r\n\r\n        return (\r\n            <div style={{ justifyContent: \"center\" }}>\r\n                <svg id='body10' width=\"100%\" height={650}></svg>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}