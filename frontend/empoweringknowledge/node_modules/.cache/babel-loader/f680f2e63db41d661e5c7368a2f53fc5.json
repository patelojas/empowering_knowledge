{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Docker\\\\swe\\\\EmPoweringKnowledge\\\\cs373-web\\\\frontend\\\\empoweringknowledge\\\\src\\\\BarGraph.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\nconst POLIURL = 'https://api.empoweringknowledge.me/api/states';\nexport default class BarGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stateReps: [],\n      loaded: false\n    };\n    this.createBarGraph = this.createBarGraph.bind(this);\n    this.fetchStateReps = this.fetchStateReps.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchStateReps();\n\n    if (this.state.loaded) {\n      console.log(\"finished loading... component did mount\");\n      this.createBarGraph();\n    }\n  }\n  /*\r\n  * Builds the url that will be used to fetch the data.\r\n  */\n\n\n  buildUrl() {\n    var url = \"\";\n    var filter = \"\"; // If there aren't any filters or terms for searching, use default url\n    // that displays data in ascending order\n\n    if (filter === \"\") {\n      url = POLIURL + '?q={' + '\"}]}&page=' + this.state.page;\n    }\n\n    return url;\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    var url = this.buildUrl();\n    console.log(url);\n    fetch(url).then(res => res.json()).then(data => {\n      this.setState({\n        items: data.objects,\n        items: data.objects,\n        pages: data.total_pages,\n        isLoading: false\n      }, () => {\n        if (this.state.pages <= 1) this.setState({\n          nextpage: 1\n        });\n      });\n    }).catch(console.log); // get all of the representatives for the state, push them to a promises array \n    // const promises = [];\n    // // numPages and numResultsPerPage are known from looking at the data, hardcoded in\n    // let numPages = 6;\n    // for (let curPage = 1; curPage <= numPages; ++curPage) {\n    //   const pagedApi = api + \"?page=\" + curPage;\n    //   promises.push(axios.get(pagedApi, headers));\n    // }\n    // // myStateReps stores the states and their rep counts as objects, and is set to stateReps \n    // // at the end of the Promise\n    // const myStateReps = []\n    // Promise.all(promises).then((results) => {\n    //   // the results of all of the requests are stored in the results variable, which is an array\n    //   for (let resultIdx = 0; resultIdx < results.length; ++resultIdx) {\n    //     const data = results[resultIdx].data;\n    //     const objects = data.objects;\n    //     // go through each result and actually store its data\n    //     for (let dataResultIdx = 0; dataResultIdx < objects.length; ++dataResultIdx) {\n    //       const object = objects[dataResultIdx];\n    //       myStateReps.push(object);\n    //     }\n    //   }\n    //   this.setState({ stateReps: myStateReps, loaded: true });\n    // });\n  }\n\n  componentDidUpdate() {\n    if (this.state.loaded) {\n      console.log(\"finshed loading... component did update\");\n      this.createBarGraph();\n    }\n  }\n\n  createBarGraph() {\n    let margin = {\n      top: 20,\n      right: 0,\n      bottom: 30,\n      left: 40\n    };\n    let width = window.screen.width;\n    let height = 650;\n    const stateReps = this.state.stateReps;\n    let x = d3.scaleBand().domain(stateReps.map(d => d.state)).range([margin.left, width - margin.right]).padding(0.1);\n    let maxCount = d3.max(stateReps, d => d.count);\n    let y = d3.scaleLinear().domain([maxCount, 1]).nice().range([margin.top, height - margin.bottom]);\n\n    let xAxis = g => g.attr(\"transform\", \"translate(0,\".concat(height - margin.bottom, \")\")).call(d3.axisBottom(x).tickSizeOuter(0));\n\n    let yAxis = g => g.attr(\"transform\", \"translate(\".concat(margin.left, \",0)\")).call(d3.axisLeft(y)).call(g => g.select(\".domain\").remove());\n\n    const svg = d3.select(\"#body8\");\n    svg.append(\"g\").attr(\"fill\", \"rgb(219, 152, 134)\").selectAll(\"rect\").data(stateReps).enter().append(\"rect\").attr(\"x\", d => x(d.state)).attr(\"y\", d => y(d.count)).attr(\"height\", d => y(0) - y(d.count)).attr(\"width\", x.bandwidth()); //Create labels\n\n    svg.selectAll(\"text\").data(stateReps).enter().append(\"text\").attr(\"class\", \"label\").attr(\"x\", function (d) {\n      return x(d.state);\n    }).attr(\"y\", function (d) {\n      return y(d.count) - 14;\n    }).attr(\"dy\", \".75em\").text(d => d.count);\n    svg.append(\"g\").call(xAxis);\n    svg.append(\"g\").call(yAxis);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \" representatives per State \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"body8\",\n      width: \"100%\",\n      height: 650,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Docker\\swe\\EmPoweringKnowledge\\cs373-web\\frontend\\empoweringknowledge\\src\\BarGraph.js"],"names":["React","d3","axios","POLIURL","BarGraph","Component","constructor","props","state","stateReps","loaded","createBarGraph","bind","fetchStateReps","componentDidMount","console","log","buildUrl","url","filter","page","setState","isLoading","fetch","then","res","json","data","items","objects","pages","total_pages","nextpage","catch","componentDidUpdate","margin","top","right","bottom","left","width","window","screen","height","x","scaleBand","domain","map","d","range","padding","maxCount","max","count","y","scaleLinear","nice","xAxis","g","attr","call","axisBottom","tickSizeOuter","yAxis","axisLeft","select","remove","svg","append","selectAll","enter","bandwidth","text","render","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport axios from 'axios';\r\n\r\nconst POLIURL = 'https://api.empoweringknowledge.me/api/states';\r\n\r\nexport default class BarGraph extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stateReps: [],\r\n      loaded: false\r\n    };\r\n\r\n    this.createBarGraph = this.createBarGraph.bind(this);\r\n    this.fetchStateReps = this.fetchStateReps.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchStateReps();\r\n    if (this.state.loaded) {\r\n      console.log(\"finished loading... component did mount\");\r\n      this.createBarGraph();\r\n    }\r\n  }\r\n\r\n    /*\r\n   * Builds the url that will be used to fetch the data.\r\n   */\r\n  buildUrl(){\r\n      var url = \"\";\r\n      \r\n      var filter = \"\"\r\n      \r\n      // If there aren't any filters or terms for searching, use default url\r\n      // that displays data in ascending order\r\n      if(filter === \"\"){\r\n          url = POLIURL + '?q={'\r\n          + '\"}]}&page='\r\n          + this.state.page;\r\n      } \r\n\r\n      return url;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({isLoading: true});\r\n\r\n    var url = this.buildUrl();\r\n    console.log(url);\r\n    fetch(url)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            this.setState({ items: data.objects, items: data.objects, \r\n                pages:data.total_pages,isLoading: false}, () => {\r\n                if(this.state.pages <= 1)\r\n                    this.setState({nextpage: 1})    \r\n            });      \r\n        })\r\n        .catch(console.log);\r\n\r\n\r\n    // get all of the representatives for the state, push them to a promises array \r\n    // const promises = [];\r\n\r\n    // // numPages and numResultsPerPage are known from looking at the data, hardcoded in\r\n    // let numPages = 6;\r\n    // for (let curPage = 1; curPage <= numPages; ++curPage) {\r\n    //   const pagedApi = api + \"?page=\" + curPage;\r\n    //   promises.push(axios.get(pagedApi, headers));\r\n    // }\r\n\r\n    // // myStateReps stores the states and their rep counts as objects, and is set to stateReps \r\n    // // at the end of the Promise\r\n    // const myStateReps = []\r\n\r\n    // Promise.all(promises).then((results) => {\r\n    //   // the results of all of the requests are stored in the results variable, which is an array\r\n    //   for (let resultIdx = 0; resultIdx < results.length; ++resultIdx) {\r\n    //     const data = results[resultIdx].data;\r\n    //     const objects = data.objects;\r\n    //     // go through each result and actually store its data\r\n    //     for (let dataResultIdx = 0; dataResultIdx < objects.length; ++dataResultIdx) {\r\n    //       const object = objects[dataResultIdx];\r\n    //       myStateReps.push(object);\r\n    //     }\r\n    //   }\r\n    //   this.setState({ stateReps: myStateReps, loaded: true });\r\n    // });\r\n}\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.loaded) {\r\n      console.log(\"finshed loading... component did update\");\r\n      this.createBarGraph();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  createBarGraph() {\r\n    let margin = ({ top: 20, right: 0, bottom: 30, left: 40 });\r\n    let width = window.screen.width;\r\n    let height = 650;\r\n\r\n    const stateReps = this.state.stateReps;\r\n\r\n    let x = d3.scaleBand()\r\n      .domain(stateReps.map(d => d.state))\r\n      .range([margin.left, width - margin.right])\r\n      .padding(0.1);\r\n\r\n    let maxCount = d3.max(stateReps, d => d.count);\r\n    let y = d3.scaleLinear()\r\n      .domain([maxCount, 1]).nice()\r\n      .range([margin.top, height - margin.bottom]);\r\n\r\n    let xAxis = g => g\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(d3.axisBottom(x)\r\n        .tickSizeOuter(0));\r\n\r\n    let yAxis = g => g\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(d3.axisLeft(y))\r\n      .call(g => g.select(\".domain\").remove());\r\n\r\n\r\n    const svg = d3.select(\"#body8\");\r\n\r\n    svg.append(\"g\")\r\n      .attr(\"fill\", \"rgb(219, 152, 134)\")\r\n      .selectAll(\"rect\").data(stateReps).enter().append(\"rect\")\r\n      .attr(\"x\", d => x(d.state))\r\n      .attr(\"y\", d => y(d.count))\r\n      .attr(\"height\", d => y(0) - y(d.count))\r\n      .attr(\"width\", x.bandwidth());\r\n\r\n    //Create labels\r\n    svg.selectAll(\"text\")\r\n      .data(stateReps)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"x\", (function (d) {\r\n        return x(d.state);\r\n      }))\r\n      .attr(\"y\", function (d) {\r\n        return y(d.count) - 14;\r\n      })\r\n      .attr(\"dy\", \".75em\")\r\n      .text(d => d.count);\r\n\r\n    svg.append(\"g\")\r\n      .call(xAxis);\r\n\r\n    svg.append(\"g\")\r\n      .call(yAxis);\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 style={{ textAlign: \"center\" }}> representatives per State </h1>\r\n        <div>\r\n          <svg id='body8' width=\"100%\" height={650}></svg>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}