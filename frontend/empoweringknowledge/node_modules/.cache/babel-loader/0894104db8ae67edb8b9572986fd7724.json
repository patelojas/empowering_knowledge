{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setData = setData;\nexports.convertDateArrToObjectArr = convertDateArrToObjectArr;\n/**\n * Generate data test\n * @param {Date} dateStart\n * @param {Date} dateEnd\n * @param {Date} nb : Numbers of data generated\n * @returns An Array of data(Object{date: Date, count: Number}). The length of array is equal to nb params\n */\n\nfunction setData(dateStart, dateEnd, nb) {\n  var data = [];\n  var dates = [];\n\n  for (var i = 0; i < nb; i++) {\n    var _date = randomDate(dateStart, dateEnd);\n\n    while (dates.includes(_date)) {\n      _date = randomDate(dateStart, dateEnd);\n    }\n\n    dates.push(_date);\n\n    var _count = Math.floor(Math.random() * 14);\n\n    data.push({\n      date: new Date(_date),\n      count: _count\n    });\n  }\n\n  return data;\n}\n/**\n * Generate a random date between two dates\n * @param {Date} start\n * @param {Date} end\n * @returns a random date\n */\n\n\nfunction randomDate(start, end) {\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n}\n/**\n * Convert an array of date to a n array of Object{ date: Date, count: Number}\n * @param {Array[Date]} dates\n * @returns an array of Object{ date: Date, count: Number}\n */\n\n\nfunction convertDateArrToObjectArr(dates) {\n  var result = [];\n  dates.map(function (date) {\n    var dateTmp = new Date(date).setHours(0, 0, 0, 0);\n\n    if (!isNaN(dateTmp) && typeof dateTmp === \"number\") {\n      var index = result.findIndex(function (d) {\n        var dateToMatch = new Date(d.date).setHours(0, 0, 0, 0);\n        return dateToMatch === dateTmp;\n      });\n\n      if (index !== -1) {\n        result[index].count += 1;\n      } else {\n        result.push({\n          date: new Date(dateTmp),\n          count: 1\n        });\n      }\n    }\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}