{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Docker\\\\swe\\\\EmPoweringKnowledge\\\\cs373-web\\\\frontend\\\\empoweringknowledge\\\\src\\\\Map.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.democrat = 0;\n    this.republican = 0;\n    this.other = 0;\n    this.pages = 1;\n  }\n\n  componentDidMount() {\n    var value = window.location.href.split(\"/\");\n    var path = value[4];\n    var page = 1;\n\n    for (var i = 1; i < 173; i++) {\n      fetch('https://api.empoweringknowledge.me/api/congressmembers?page=' + page).then(res => res.json()).then(data => {\n        for (var d of data.objects) {\n          console.log(d);\n\n          if (d.party == \"D\") {\n            this.democrat += Object.keys(d.bills_sponsored).length;\n          } else if (d.party == \"R\") {\n            this.republican += Object.keys(d.bills_sponsored).length;\n          } else {\n            this.other += Object.keys(d.bills_sponsored).length;\n          }\n        }\n      });\n    }\n  }\n\n  render() {\n    var width = 450;\n    var height = 450;\n    var margin = 40; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n    var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n    var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); // Create dummy data\n\n    var data = {\n      republican: this.republican,\n      democrat: this.democrat,\n      other: this.other\n    }; // set the color scale\n\n    var color = d3.scaleOrdinal().domain(data).range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"]); // Compute the position of each group on the pie:\n\n    var pie = d3.pie().value(function (d) {\n      return d.value;\n    });\n    var data_ready = pie(d3.entries(data)); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n    svg.selectAll('whatever').data(data_ready).enter().append('path').attr('d', d3.arc().innerRadius(0).outerRadius(radius)).attr('fill', function (d) {\n      return color(d.data.key);\n    }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n    var color = 0;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\Docker\\swe\\EmPoweringKnowledge\\cs373-web\\frontend\\empoweringknowledge\\src\\Map.js"],"names":["React","Component","d3","Map","constructor","props","democrat","republican","other","pages","componentDidMount","value","window","location","href","split","path","page","i","fetch","then","res","json","data","d","objects","console","log","party","Object","keys","bills_sponsored","length","render","width","height","margin","radius","Math","min","svg","select","append","attr","color","scaleOrdinal","domain","range","pie","data_ready","entries","selectAll","enter","arc","innerRadius","outerRadius","key","style"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass Map extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.democrat = 0;\r\n        this.republican = 0;\r\n        this.other = 0;\r\n        this.pages = 1;\r\n    }\r\n\r\n    componentDidMount() {\r\n        var value = window.location.href.split(\"/\")\r\n        var path = (value[4])\r\n        var page = 1;\r\n        for(var i = 1; i < 173; i++){\r\n            fetch('https://api.empoweringknowledge.me/api/congressmembers?page=' + page)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                for(var d of data.objects){\r\n                    console.log(d)\r\n                    if(d.party == \"D\"){\r\n                        this.democrat += Object.keys(d.bills_sponsored).length\r\n                    }\r\n                    else if(d.party == \"R\"){\r\n                        this.republican += Object.keys(d.bills_sponsored).length\r\n                    }\r\n                    else {\r\n                        this.other += Object.keys(d.bills_sponsored).length\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n\r\n  \r\n\r\n    render() {\r\n        var width = 450\r\n        var height = 450\r\n        var margin = 40\r\n\r\n        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\r\n        var radius = Math.min(width, height) / 2 - margin\r\n\r\n        // append the svg object to the div called 'my_dataviz'\r\n        var svg = d3.select(\"#my_dataviz\")\r\n        .append(\"svg\")\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n        .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\r\n\r\n        // Create dummy data\r\n        var data = {republican: this.republican, democrat: this.democrat, other: this.other}\r\n\r\n        // set the color scale\r\n        var color = d3.scaleOrdinal()\r\n        .domain(data)\r\n        .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"])\r\n\r\n        // Compute the position of each group on the pie:\r\n        var pie = d3.pie()\r\n        .value(function(d) {return d.value; })\r\n        var data_ready = pie(d3.entries(data))\r\n\r\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\r\n        svg\r\n        .selectAll('whatever')\r\n        .data(data_ready)\r\n        .enter()\r\n        .append('path')\r\n        .attr('d', d3.arc()\r\n            .innerRadius(0)\r\n            .outerRadius(radius)\r\n        )\r\n        .attr('fill', function(d){ return(color(d.data.key)) })\r\n        .attr(\"stroke\", \"black\")\r\n        .style(\"stroke-width\", \"2px\")\r\n        .style(\"opacity\", 0.7)\r\n\r\n        var color = 0;\r\n        return (\r\n           <div></div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}