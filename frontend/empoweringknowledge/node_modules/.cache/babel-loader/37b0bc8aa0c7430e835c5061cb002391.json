{"ast":null,"code":"var _jsxFileName = \"/Users/ojaspatel/cs373-web/frontend/empoweringknowledge/src/BarGraph.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\nexport default class BarGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stateReps: [],\n      loaded: false\n    };\n    this.createBarGraph = this.createBarGraph.bind(this);\n    this.fetchStateReps = this.fetchStateReps.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchStateReps();\n\n    if (this.state.loaded) {\n      console.log(\"finished loading... component did mount\");\n      this.createBarGraph();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.loaded) {\n      console.log(\"finshed loading... component did update\");\n      this.createBarGraph();\n    }\n  }\n\n  fetchStateReps() {\n    const headers = {\n      'Access-Control-Allow-Origin': '*'\n    };\n    const api = 'https://api.empoweringknowledge.me/api/states'; // get all of the representatives for the state, push them to a promises array \n\n    const promises = []; // numPages and numResultsPerPage are known from looking at the data, hardcoded in\n\n    let numPages = 6;\n\n    for (let curPage = 1; curPage <= numPages; ++curPage) {\n      const pagedApi = api + \"?page=\" + curPage;\n      promises.push(axios.get(pagedApi, headers));\n    } // myStateReps stores the states and their rep counts as objects, and is set to stateReps \n    // at the end of the Promise\n\n\n    const myStateReps = [];\n    Promise.all(promises).then(results => {\n      // the results of all of the requests are stored in the results variable, which is an array\n      for (let resultIdx = 0; resultIdx < results.length; ++resultIdx) {\n        const data = results[resultIdx].data;\n        const objects = data.objects; // go through each result and actually store its data\n\n        for (let dataResultIdx = 0; dataResultIdx < objects.length; ++dataResultIdx) {\n          const object = objects[dataResultIdx];\n          myStateReps.push(object);\n        }\n      }\n\n      this.setState({\n        stateReps: myStateReps,\n        loaded: true\n      });\n    });\n  }\n\n  createBarGraph() {\n    let margin = {\n      top: 20,\n      right: 0,\n      bottom: 30,\n      left: 40\n    };\n    let width = window.screen.width;\n    let height = 650;\n    const stateReps = this.state.stateReps;\n    let x = d3.scaleBand().domain(stateReps.map(d => d.state)).range([margin.left, width - margin.right]).padding(0.1);\n    let maxCount = d3.max(stateReps, d => d.count);\n    let y = d3.scaleLinear().domain([maxCount, 1]).nice().range([margin.top, height - margin.bottom]);\n\n    let xAxis = g => g.attr(\"transform\", \"translate(0,\".concat(height - margin.bottom, \")\")).call(d3.axisBottom(x).tickSizeOuter(0));\n\n    let yAxis = g => g.attr(\"transform\", \"translate(\".concat(margin.left, \",0)\")).call(d3.axisLeft(y)).call(g => g.select(\".domain\").remove());\n\n    const svg = d3.select(\"#body8\");\n    svg.append(\"g\").attr(\"fill\", \"rgb(219, 152, 134)\").selectAll(\"rect\").data(stateReps).enter().append(\"rect\").attr(\"x\", d => x(d.state)).attr(\"y\", d => y(d.count)).attr(\"height\", d => y(0) - y(d.count)).attr(\"width\", x.bandwidth()); //Create labels\n\n    svg.selectAll(\"text\").data(stateReps).enter().append(\"text\").attr(\"class\", \"label\").attr(\"x\", function (d) {\n      return x(d.state);\n    }).attr(\"y\", function (d) {\n      return y(d.count) - 14;\n    }).attr(\"dy\", \".75em\").text(d => d.count);\n    svg.append(\"g\").call(xAxis);\n    svg.append(\"g\").call(yAxis);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \" Number of Representatives Per State \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      id: \"body8\",\n      width: \"100%\",\n      height: 650,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/ojaspatel/cs373-web/frontend/empoweringknowledge/src/BarGraph.js"],"names":["React","d3","axios","BarGraph","Component","constructor","props","state","stateReps","loaded","createBarGraph","bind","fetchStateReps","componentDidMount","console","log","componentDidUpdate","headers","api","promises","numPages","curPage","pagedApi","push","get","myStateReps","Promise","all","then","results","resultIdx","length","data","objects","dataResultIdx","object","setState","margin","top","right","bottom","left","width","window","screen","height","x","scaleBand","domain","map","d","range","padding","maxCount","max","count","y","scaleLinear","nice","xAxis","g","attr","call","axisBottom","tickSizeOuter","yAxis","axisLeft","select","remove","svg","append","selectAll","enter","bandwidth","text","render","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nexport default class BarGraph extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      stateReps: [],\n      loaded: false\n    };\n\n    this.createBarGraph = this.createBarGraph.bind(this);\n    this.fetchStateReps = this.fetchStateReps.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchStateReps();\n    if (this.state.loaded) {\n      console.log(\"finished loading... component did mount\");\n      this.createBarGraph();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.loaded) {\n      console.log(\"finshed loading... component did update\");\n      this.createBarGraph();\n    }\n  }\n\n\n  fetchStateReps() {\n    const headers = { 'Access-Control-Allow-Origin': '*' };\n\n    const api = 'https://api.empoweringknowledge.me/api/states';\n\n    // get all of the representatives for the state, push them to a promises array \n    const promises = [];\n\n    // numPages and numResultsPerPage are known from looking at the data, hardcoded in\n    let numPages = 6;\n    for (let curPage = 1; curPage <= numPages; ++curPage) {\n      const pagedApi = api + \"?page=\" + curPage;\n      promises.push(axios.get(pagedApi, headers));\n    }\n\n    // myStateReps stores the states and their rep counts as objects, and is set to stateReps \n    // at the end of the Promise\n    const myStateReps = []\n\n    Promise.all(promises).then((results) => {\n      // the results of all of the requests are stored in the results variable, which is an array\n      for (let resultIdx = 0; resultIdx < results.length; ++resultIdx) {\n        const data = results[resultIdx].data;\n        const objects = data.objects;\n        // go through each result and actually store its data\n        for (let dataResultIdx = 0; dataResultIdx < objects.length; ++dataResultIdx) {\n          const object = objects[dataResultIdx];\n          myStateReps.push(object);\n        }\n      }\n      this.setState({ stateReps: myStateReps, loaded: true });\n    });\n\n  }\n\n  createBarGraph() {\n    let margin = ({ top: 20, right: 0, bottom: 30, left: 40 });\n    let width = window.screen.width;\n    let height = 650;\n\n    const stateReps = this.state.stateReps;\n\n    let x = d3.scaleBand()\n      .domain(stateReps.map(d => d.state))\n      .range([margin.left, width - margin.right])\n      .padding(0.1);\n\n    let maxCount = d3.max(stateReps, d => d.count);\n    let y = d3.scaleLinear()\n      .domain([maxCount, 1]).nice()\n      .range([margin.top, height - margin.bottom]);\n\n    let xAxis = g => g\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(d3.axisBottom(x)\n        .tickSizeOuter(0));\n\n    let yAxis = g => g\n      .attr(\"transform\", `translate(${margin.left},0)`)\n      .call(d3.axisLeft(y))\n      .call(g => g.select(\".domain\").remove());\n\n\n    const svg = d3.select(\"#body8\");\n\n    svg.append(\"g\")\n      .attr(\"fill\", \"rgb(219, 152, 134)\")\n      .selectAll(\"rect\").data(stateReps).enter().append(\"rect\")\n      .attr(\"x\", d => x(d.state))\n      .attr(\"y\", d => y(d.count))\n      .attr(\"height\", d => y(0) - y(d.count))\n      .attr(\"width\", x.bandwidth());\n\n    //Create labels\n    svg.selectAll(\"text\")\n      .data(stateReps)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"label\")\n      .attr(\"x\", (function (d) {\n        return x(d.state);\n      }))\n      .attr(\"y\", function (d) {\n        return y(d.count) - 14;\n      })\n      .attr(\"dy\", \".75em\")\n      .text(d => d.count);\n\n    svg.append(\"g\")\n      .call(xAxis);\n\n    svg.append(\"g\")\n      .call(yAxis);\n\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 style={{ textAlign: \"center\" }}> Number of Representatives Per State </h1>\n        <div>\n          <svg id='body8' width=\"100%\" height={650}></svg>\n        </div>\n\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}